#include "TimeManagement.h"


#include "TimeLib.h"
#include "Timezone.h"    //https://github.com/JChristensen/Timezone


#define N614TimeRules_debug=1

//United Kingdom (London, Belfast)
TimeChangeRule BST = { "BST", Last, Sun, Mar, 1, 60 };        //British Summer Time
TimeChangeRule GMT = { "GMT", Last, Sun, Oct, 2, 0 };         //Standard Time
Timezone UK(BST, GMT);

//WET / WEST TODO
TimeChangeRule WET= { "WET", Last, Sun, Mar, 1, 60 };        //West European Standard Time
TimeChangeRule WEST = { "WEST", Last, Sun, Oct, 2, 0 };      //West European Summer Time
Timezone WE(WET, WEST);

//Central European Time (Frankfurt, Paris)
TimeChangeRule CEST = { "CEST", Last, Sun, Mar, 2, 120 };     //Central European Summer Time
TimeChangeRule CET = { "CET ", Last, Sun, Oct, 3, 60 };       //Central European Standard Time
Timezone CE(CEST, CET);

//EET / EEST TODO
TimeChangeRule EET = { "EET", Last, Sun, Mar, 4, 120 };        //East European Standard Time
TimeChangeRule EEST = { "EEST", Last, Sun, Oct, 3, 180 };      //East European Summer Time
Timezone EE(EET, EEST);


//US Pacific Time Zone (Las Vegas, Los Angeles)
TimeChangeRule usPDT = { "PDT", Second, dowSunday, Mar, 2, -420 }; //-0800
TimeChangeRule usPST = { "PST", First, dowSunday, Nov, 2, -480 };
Timezone usPT(usPDT, usPST);

//US Mountain Time Zone (Denver, Salt Lake City)
TimeChangeRule usMDT = { "MDT", Second, dowSunday, Mar, 2, -360 }; //-0700
TimeChangeRule usMST = { "MST", First, dowSunday, Nov, 2, -420 };
Timezone usMT(usMDT, usMST);

//US Central Time Zone (Chicago, Houston)
TimeChangeRule usCDT = { "CDT", Second, dowSunday, Mar, 2, -300 }; //-0600
TimeChangeRule usCST = { "CST", First, dowSunday, Nov, 2, -360 };
Timezone usCT(usCDT, usCST);

//US Eastern Time Zone (New York, Detroit)
TimeChangeRule usEDT = { "EDT", Second, Sun, Mar, 2, -240 };  //Eastern Daylight Time = UTC - 4 hours
TimeChangeRule usEST = { "EST", First, Sun, Nov, 2, -300 };   //Eastern Standard Time = UTC - 5 hours
Timezone usET(usEDT, usEST);

//Australia Eastern Time Zone (Sydney, Melbourne)
TimeChangeRule aEDT = { "AEDT", First, Sun, Oct, 2, 660 };    //UTC + 11 hours
TimeChangeRule aEST = { "AEST", First, Sun, Apr, 3, 600 };    //UTC + 10 hours
Timezone ausET(aEDT, aEST);




TimeChangeRule aGMT1 = {"GMT1", First, Mon, Jan, 1,-720};//GMT -12
Timezone GMT1(aGMT1, aGMT1);

TimeChangeRule aGMT2 = {"GMT2", First, Mon, Jan, 1,-660};//GMT - 11
Timezone GMT2(aGMT2, aGMT2);

TimeChangeRule aGMT3 = {"GMT3", First, Mon, Jan, 1,-60};//GMT - 10
Timezone GMT3(aGMT3, aGMT3);

TimeChangeRule aGMT4 = { "GMT4", First, Mon, Jan, 1,-570 };//GMT -; 9.5
Timezone GMT4(aGMT4, aGMT4);

TimeChangeRule aGMT5 = {"GMT5", First, Mon, Jan, 1,-540};//GMT - 9
Timezone GMT5(aGMT5, aGMT5);

TimeChangeRule aGMT6 = {"GMT6", First, Mon, Jan, 1,-480};//GMT - 8
Timezone GMT6(aGMT6, aGMT6);

TimeChangeRule aGMT7 = {"GMT7", First, Mon, Jan, 1,-420};//GMT - 7
Timezone GMT7(aGMT7, aGMT7);

TimeChangeRule aGMT8 = {"GMT8"   , First, Mon, Jan, 1,-360};//GMT - 6
Timezone GMT8(aGMT8, aGMT8);

TimeChangeRule aGMT9 = { "GMT9"   , First, Mon, Jan, 1,-300 };//GMT -; 5
Timezone GMT9(aGMT9, aGMT9);

TimeChangeRule aGMT10 = {"GMT10" , First, Mon, Jan, 1,-270}; //GMT -4.5
Timezone GMT10(aGMT10, aGMT10);

TimeChangeRule aGMT11 = {"GMT11" , First, Mon, Jan, 1,-240}; // GMT -4
Timezone GMT11(aGMT11, aGMT11);

TimeChangeRule aGMT12 = {"GMT12" , First, Mon, Jan, 1,-210}; // GMT -3.5
Timezone GMT12(aGMT12, aGMT12);

TimeChangeRule aGMT13 = {"GMT13" , First, Mon, Jan, 1,-180};  //GMT -3
Timezone GMT13(aGMT13, aGMT13);

TimeChangeRule aGMT14 = {"GMT14" , First, Mon, Jan, 1,-120}; //GMT -2
Timezone GMT14(aGMT14, aGMT14);

TimeChangeRule aGMT15 = {"GMT15" , First, Mon, Jan, 1,-60}; // GMT -1
Timezone GMT15(aGMT15, aGMT15);


Timezone GMT16(GMT, GMT);


TimeChangeRule aGMT17 = {"GMT17" , First, Mon, Jan, 1,60}; // GMT+1
Timezone GMT17(aGMT17, aGMT17);

TimeChangeRule aGMT18 = {"GMT18" , First, Mon, Jan, 1,120}; // GMT+2
Timezone GMT18(aGMT18, aGMT18);

TimeChangeRule aGMT19 = {"GMT19" , First, Mon, Jan, 1,210}; // GMT + 3.5
Timezone GMT19(aGMT19, aGMT19);

TimeChangeRule aGMT20 = {"GMT20" , First, Mon, Jan, 1,240}; // GTMT +4 
Timezone GMT20(aGMT20, aGMT20);

TimeChangeRule aGMT21 = {"GMT21" , First, Mon, Jan, 1,270}; // GMT + 4.5
Timezone GMT21(aGMT21, aGMT21);

TimeChangeRule aGMT22 = {"GMT22" , First, Mon, Jan, 1,300};//GMT +5
Timezone GMT22(aGMT22, aGMT22);

TimeChangeRule aGMT23 = {"GMT23" , First, Mon, Jan, 1,330};//GMT +5.5
Timezone GMT23(aGMT23, aGMT23);

TimeChangeRule aGMT24 = {"GMT24" , First, Mon, Jan, 1,345};//GMT +5.75
Timezone GMT24(aGMT24, aGMT24);

TimeChangeRule aGMT25 = {"GMT25" , First, Mon, Jan, 1,360};//GMT +6
Timezone GMT25(aGMT25, aGMT25);

TimeChangeRule aGMT26 = {"GMT26" , First, Mon, Jan, 1,390};//GMT +6.5
Timezone GMT26(aGMT26, aGMT26);

TimeChangeRule aGMT27 = {"GMT27" , First, Mon, Jan, 1,420};//GMT +7
Timezone GMT27(aGMT27, aGMT27);

TimeChangeRule aGMT28 = {"GMT28" , First, Mon, Jan, 1,480}; //GMT +8
Timezone GMT28(aGMT28, aGMT28);

TimeChangeRule aGMT29 = {"GMT29" , First, Mon, Jan, 1,525};//GMT +8.75
Timezone GMT29(aGMT29, aGMT29);

TimeChangeRule aGMT30 = {"GMT30" , First, Mon, Jan, 1,540};//GMT +9
Timezone GMT30(aGMT30, aGMT30);

TimeChangeRule aGMT31 = {"GMT31" , First, Mon, Jan, 1,570};//GMT +9.5
Timezone GMT31(aGMT31, aGMT31);

TimeChangeRule aGMT32 = {"GMT32" , First, Mon, Jan, 1,600};//GMT +10
Timezone GMT32(aGMT32, aGMT32);

TimeChangeRule aGMT33 = {"GMT33" , First, Mon, Jan, 1,630};//GMT +10.5
Timezone GMT33(aGMT33, aGMT33);

TimeChangeRule aGMT34 = {"GMT34" , First, Mon, Jan, 1,660};//GMT +11
Timezone GMT34(aGMT34, aGMT34);

TimeChangeRule aGMT35 = {"GMT35" , First, Mon, Jan, 1,690};//GMT +11.5
Timezone GMT35(aGMT35, aGMT35);

TimeChangeRule aGMT36 = {"GMT36" , First, Mon, Jan, 1,720};//GMT +12
Timezone GMT36(aGMT36, aGMT36);

TimeChangeRule aGMT37 = {"GMT37" , First, Mon, Jan, 1,765};//GMT +12.75
Timezone GMT37(aGMT37, aGMT37);

TimeChangeRule aGMT38 = {"GMT38" , First, Mon, Jan, 1,780};//GMT +13
Timezone GMT38(aGMT38, aGMT38);

TimeChangeRule aGMT39 = {"GMT39" , First, Mon, Jan, 1,840};//GMT +14
Timezone GMT39(aGMT39, aGMT39);


TimeChangeRule *tcr;        //pointer to the time change rule, use to get the TZ abbrev
time_t utc;

boolean syncEventTriggered = false; // True if a time even has been triggered
bool		_NTPSynced = 0;
NTPSyncEvent_t ntpEvent; // Last triggered event
bool _syncFlag = false;

_dstZones _currentDST;
float _currentTimeOffset=0;
int _currentTimeOffsetIndex = 0;

/* -------------------------------------------------- */
bool TimeManagement::getSyncFlag()
{
	return _syncFlag;
}

/* -------------------------------------------------- */
void TimeManagement::resetSyncFlag()
{
	_syncFlag = false;
}

/* -------------------------------------------------- */
void TimeManagement::resetTime()
{
	setTime(0, 0, 0, 11, 11, 2017); 
									
}

time_t TimeManagement::doTime(int hr, int min, int sec, int dy, int mnth, int yr)
{
	tmElements_t tm;
	
	if (yr > 99)
		yr = yr - 1970;
	else
		yr += 30;
	tm.Year = yr;
	tm.Month = mnth;
	tm.Day = dy;
	tm.Hour = hr;
	tm.Minute = min;
	tm.Second = sec;
	return makeTime(tm);
}

/* -------------------------------------------------- */
sTime TimeManagement::GetTime(_dstZones DSTZone, int _timeZoneIndex , time_t time)
{
	sTime retVal;
	retVal.isDST = CE.locIsDST(time);

	switch (DSTZone)
	{
	case EUGMT:		retVal.TZName = (retVal.isDST) ? "BST" : "GMT";
		time = UK.toLocal(time, &tcr);
		break;
	case EUWET:		retVal.TZName = (retVal.isDST) ? "WET" : "WEST";
		time = WE.toLocal(time, &tcr);
		break;
	case EUCET:		retVal.TZName = (retVal.isDST) ? "CEST" : "CET";
		time = CE.toLocal(time, &tcr);
		break;
	case EUEET:		retVal.TZName = (retVal.isDST) ? "CEST" : "CET";
		time = CE.toLocal(time, &tcr);
		break;
	case USPT:		retVal.TZName = (retVal.isDST) ? "PDT" : "PST";
		time = usPT.toLocal(time, &tcr);
		break;
	case USMT:		retVal.TZName = (retVal.isDST) ? "MST" : "CET";
		time = usMT.toLocal(time, &tcr);
		break;
	case USCT:		retVal.TZName = (retVal.isDST) ? "CST" : "CDT";
		time = usCT.toLocal(time, &tcr);
		break;
	case USET:		retVal.TZName = (retVal.isDST) ? "EDT" : "EST";
		time = usET.toLocal(time, &tcr);
		break;
	case AUET: retVal.TZName = (retVal.isDST) ? "AEST" : "AEDT";
			time = ausET.toLocal(time, &tcr);
			break;
	default : retVal.TZName = (retVal.isDST) ? "BST" : "GMT";
		time = UK.toLocal(time, &tcr);
		break;
	}

	if (DSTZone == NONE)
	{
		//Serial.print("No DST Zone, ined is  ");
		//Serial.println(_timeZoneIndex);

		switch (_timeZoneIndex)
		{

		case 1 : time = GMT1.toLocal(time, &tcr);break;
		case 2 : time = GMT2.toLocal(time, &tcr);break;
		case 3 : time = GMT3.toLocal(time, &tcr);break;
		case 4 : time = GMT4.toLocal(time, &tcr);break;
		case 5 : time = GMT5.toLocal(time, &tcr);break;
		case 6 : time = GMT6.toLocal(time, &tcr);break;
		case 7 : time = GMT7.toLocal(time, &tcr);break;
		case 8 : time = GMT8.toLocal(time, &tcr);break;
		case 9 : time = GMT9.toLocal(time, &tcr);break;
		case 10: time = GMT10.toLocal(time, &tcr);break;
		case 11: time = GMT11.toLocal(time, &tcr);break;
		case 12: time = GMT12.toLocal(time, &tcr);break;
		case 13: time = GMT13.toLocal(time, &tcr);break;
		case 14: time = GMT14.toLocal(time, &tcr);break;
		case 15: time = GMT15.toLocal(time, &tcr);break;

		case 16: time = GMT16.toLocal(time, &tcr);break;

		case 17: time = GMT17.toLocal(time, &tcr);break;
		case 18: time = GMT18.toLocal(time, &tcr);break;
		case 19: time = GMT19.toLocal(time, &tcr);break;
		case 20: time = GMT20.toLocal(time, &tcr);break;
		case 21: time = GMT21.toLocal(time, &tcr);break;
		case 22: time = GMT22.toLocal(time, &tcr);break;
		case 23: time = GMT23.toLocal(time, &tcr);break;
		case 24: time = GMT24.toLocal(time, &tcr);break;
		case 25: time = GMT25.toLocal(time, &tcr);break;
		case 26: time = GMT26.toLocal(time, &tcr);break;
		case 27: time = GMT27.toLocal(time, &tcr);break;
		case 28: time = GMT28.toLocal(time, &tcr);break;
		case 29: time = GMT29.toLocal(time, &tcr);break;
		case 30: time = GMT30.toLocal(time, &tcr);break;
		case 31: time = GMT31.toLocal(time, &tcr);break;
		case 32: time = GMT32.toLocal(time, &tcr);break;
		case 33: time = GMT33.toLocal(time, &tcr);break;
		case 34: time = GMT34.toLocal(time, &tcr);break;
		case 35: time = GMT35.toLocal(time, &tcr);break;
		case 36: time = GMT36.toLocal(time, &tcr);break;
		case 37: time = GMT37.toLocal(time, &tcr);break;
		case 38: time = GMT38.toLocal(time, &tcr);break;
		case 39: time = GMT39.toLocal(time, &tcr);break;


		default:  time = GMT16.toLocal(time, &tcr);_timeZoneIndex = 16;break;
			break;
		}
		retVal.TZName = TimeZones[_timeZoneIndex].shortName.c_str();
	}
			
	retVal.day    = day(time);
	retVal.month  = month(time);
	retVal.year   = year(time);
	retVal.wDay   = 0;

	retVal.hour   = hour(time);
	retVal.minute = minute(time);
	retVal.second = second(time);
	return retVal;
}

/* -------------------------------------------------- */
sTime TimeManagement::GetUTC()
{
	sTime retVal;
	time_t _time = now();
	retVal.day = 0;
	retVal.month = 0;
	retVal.year = 0;
	retVal.wDay = 0;
	   
	retVal.hour = hour(_time);
	retVal.minute = minute(_time);
	retVal.second = second(_time);
	return retVal;
}

/* -------------------------------------------------- */
SSyncInfo TimeManagement::GetSyncInfo()
{
	SSyncInfo syncInfo;

	time_t lastSync      = NTP.getLastNTPSync();
	syncInfo.time.hour   = hour(lastSync);
	syncInfo.time.minute = minute(lastSync);
	syncInfo.time.second = second(lastSync);
	syncInfo.time.day    = day(lastSync);
	syncInfo.time.month  = month(lastSync);
	syncInfo.time.year   = year(lastSync);

	syncInfo.synced = (hour(lastSync) + minute(lastSync) + second(lastSync)) > 0;

	return syncInfo;
}

/* -------------------------------------------------- */
void TimeManagement::processSyncEvent(NTPSyncEvent_t ntpEvent) {
	if (ntpEvent)
	{
		Serial.print("-- Time Sync error: ");
		if (ntpEvent == noResponse)
		{
		  Serial.println("-- NTP server not reachable");
	  }
	  else if (ntpEvent == invalidAddress)
		{
		  Serial.println("-- Invalid NTP server address");
		}
		else if (ntpEvent == noWiFi)
		{
		  Serial.println("-- No Wifi connection");
	  }
		else
		{
			Serial.println("-- Unknown NTP Error");
		}

		_NTPSynced = false;
	}
	else 
	{
		Serial.print("-- Got NTP time: ");
		Serial.println(NTP.getTimeDateString(NTP.getLastNTPSync()));
		_NTPSynced = true;
		_syncFlag = true;
	}
}

/* -------------------------------------------------- */
TimeManagement::TimeManagement()
{

	N614_EEPROMClass _eeprom;
		
	TimeZones[0] = TimeZone{0, "None. DST settings used.","-"};
	TimeZones[1] = TimeZone{ -12, "(GMT -12:00) Eniwetok, Kwajalein","GMT-12" };
	TimeZones[2] = TimeZone{ -11  , "(GMT -11:00) Midway Island, Samoa","GMT-11" };
	TimeZones[3] = TimeZone{ -10  , "(GMT -10:00) Hawaii","GMT-10" };
	TimeZones[4] = TimeZone{ -9.5 , "(GMT - 9:30) Taiohae","GMT-9.5"};
	TimeZones[5] = TimeZone{ -9   , "(GMT - 9:00) Alaska","GMT-9" };
	TimeZones[6] = TimeZone{ -8   , "(GMT - 8:00) Pacific Time (US & Canada","GMT-8" };
	TimeZones[7] = TimeZone{ -7   , "(GMT - 7:00) Mountain Time (US & Canada","GMT-7" };
	TimeZones[8] = TimeZone{ -6   , "(GMT - 6:00) Central Time (US & Canada), Mexico City","GMT-6" };
	TimeZones[9] = TimeZone{ -5   , "(GMT - 5:00) Eastern Time (US & Canada), Bogota, Lima","GMT-5" };
	TimeZones[10] = TimeZone{ -4.5 , "(GMT - 4:30) Caracas","GMT-4.5" };
	TimeZones[11] = TimeZone{ -4   , "(GMT - 4:00) Atlantic Time (Canada), Caracas, La Paz","GMT-4" };
	TimeZones[12] = TimeZone{ -3.5 , "(GMT - 3:30) Newfoundland","GMT-3.5" };
	TimeZones[13] = TimeZone{ -3   , "(GMT - 3:00) Brazil, Buenos Aires, Georgetown","GMT-3" };
	TimeZones[14] = TimeZone{ -2   , "(GMT - 2:00) Mid-Atlantic","GMT-2" };
	TimeZones[15] = TimeZone{ -1   , "(GMT - 1:00) Azores, Cape Verde Islands","GMT-1" };

	TimeZones[16] = TimeZone{ 0    , "(GMT + 0:00) Western Europe Time, London, Lisbon, Casablanca","GMT+0" };
	
	TimeZones[17] = TimeZone{ 1    , "(GMT + 1:00) Brussels, Copenhagen, Madrid, Geneva, Nyon","GMT+1" };
	TimeZones[18] = TimeZone{ 2    , "(GMT + 2:00) Kaliningrad, South Africa","GMT+2" };
	TimeZones[19] = TimeZone{ 3.5  , "(GMT + 3:30) Tehran","GMT+3.5"};
	TimeZones[20] = TimeZone{ 4    , "(GMT + 4:00) Abu Dhabi, Muscat, Baku, Tbilisi","GMT+4"};
	TimeZones[21] = TimeZone{ 4.5  , "(GMT + 4:30) Kabul","GMT+4.5"};
	TimeZones[22] = TimeZone{ 5    , "(GMT + 5:00) Ekaterinburg, Islamabad, Karachi, Tashkent","GMT+5" };
	TimeZones[23] = TimeZone{ 5.5  , "(GMT + 5:30) Bombay, Calcutta, Madras, New Delhi","GMT+5.5" };
	TimeZones[24] = TimeZone{ 5.75 , "(GMT + 5:45) Kathmandu, Pokhara","GMT+5.75" };
	TimeZones[25] = TimeZone{ 6    , "(GMT + 6:00) Almaty, Dhaka, Colombo","GMT+6"};
	TimeZones[26] = TimeZone{ 6.3  , "(GMT + 6:30) Yangon, Mandalay","GMT+6.5" };
	TimeZones[27] = TimeZone{ 7    , "(GMT + 7:00) Bangkok, Hanoi, Jakarta","GMT+7" };
	TimeZones[28] = TimeZone{ 8    , "(GMT + 8:00) Beijing, Perth, Singapore, Hong Kong","GMT+8" };
	TimeZones[29] = TimeZone{ 8.75 , "(GMT + 8:45) Eucla","GMT+8.75" };
	TimeZones[30] = TimeZone{ 9    , "(GMT + 9:00) Tokyo, Seoul, Osaka, Sapporo, Yakutsk","GMT+9" };
	TimeZones[31] = TimeZone{ 9.5  , "(GMT + 9:30) Adelaide, Darwin","GMT+9.5" };
	TimeZones[32] = TimeZone{ 10   , "(GMT +10:00) Eastern Australia, Guam, Vladivostok","GMT+10" };
	TimeZones[33] = TimeZone{ 10.5 , "(GMT +10:30) Lord Howe Island","GMT+10.5" };
	TimeZones[34] = TimeZone{ 11   , "(GMT +11:00) Magadan, Solomon Islands, New Caledonia","GMT+11" };
	TimeZones[35] = TimeZone{ 11.5 , "(GMT +11:30) Norfolk Island","GMT+11.5" };
	TimeZones[36] = TimeZone{ 12   , "(GMT +12:00) Auckland, Wellington, Fiji, Kamchatka","GMT+12" };
	TimeZones[37] = TimeZone{ 12.75, "(GMT +12:45) Chatham Islands","GMT+12.75" };
	TimeZones[38] = TimeZone{ 13   , "(GMT +13:00) Apia, Nukualofa","GMT+13" };
	TimeZones[39] = TimeZone{ 14   , "(GMT +14:00) Line Islands, Tokelau","GMT+14" };

	NTP.setInterval(3600);
	NTP.begin("1.pool.ntp.org", 0, false);
	_currentDST = readDSTZoneFromEEPROM();
	readTimeOffsetFromEEPROM();
}

/* -------------------------------------------------- */
bool TimeManagement::triggerSyncEvent()
{
	if (syncEventTriggered) {
		processSyncEvent(ntpEvent);
		syncEventTriggered = false;
	}
}

/* -------------------------------------------------- */
string TimeManagement::DSTZoneToString(_dstZones DSTZone)
{
	switch (DSTZone)
	{
	case NONE: return "NONE";		break;
	case EUGMT: return "EUGMT";	break;
	case EUWET:return "EUWET";	break;
	case EUCET:return "EUCET";	break;
	case EUEET:return "EUEET";	break;
	case USPT:return "USPT";	break;
	case USMT:return "USMT";	break;
	case USCT:return "USCT";	break;
	case USET:return "USET";	break;
	case AUET:return "AUET";	break;
	default: return "?";	break;
	}
}

/* -------------------------------------------------- */
_dstZones TimeManagement::getDSTZone()
{
	return _currentDST;
}

/* -------------------------------------------------- */
string TimeManagement::getDSTZoneDescription(_dstZones dstZone)
{
	switch (dstZone)
	{
	case NONE: return "No DST, use Timezone instead.";break;
	case 	EUGMT: return "GMT";break;
	case 	EUWET: return "Western Europe";break;
	case 	EUCET: return "Center Europe";break;
	case 	EUEET: return "Eastern Europe";break;
	case 	USPT: return "US Pacific Standard";break;
	case 	USMT: return "US Mountain Standard";break;
	case 	USCT: return "US Central Standard Time";break;
	case  USET:  return "US Eastern Standard Time";	break;
	case 	AUET: return "AU Eastern Standard Time";break;

	default:return "";break;
	}
}

/* -------------------------------------------------- */
string TimeManagement::getDSTShortZoneDescription(_dstZones dstZone)
{
	switch (dstZone)
	{
	case NONE: return "No";break;
	case 	EUGMT: return "GMT";break;
	case 	EUWET: return "WET";break;
	case 	EUCET: return "CET";break;
	case 	EUEET: return "EET";break;
	case 	USPT: return "PST";break;
	case 	USMT: return "MST";break;
	case 	USCT: return "CST";break;
	case 	USET: return "EST";break;

	default:return "";break;
	}
}

/* -------------------------------------------------- */
void TimeManagement::setDSTZone(_dstZones dstZone)
{
	N614_EEPROMClass _eeprom;
	_eeprom.setDSTZone(dstZone);
	_currentDST = dstZone;
}

/* -------------------------------------------------- */
float TimeManagement::getTimeOffset()
{
	static char outstr[15];
	dtostrf(_currentTimeOffset, 2, 2, outstr);
	//Serial.printf("\n Current timeOffset reads %s \n", outstr);

	return _currentTimeOffset;
}

/* -------------------------------------------------- */
string TimeManagement::getTimeOffsetOLED()
{
	return TimeZones[_currentTimeOffsetIndex].shortName;
}

/* -------------------------------------------------- */
string TimeManagement::getTimeOffsetDescription()
{

	Serial.print("_currentTimeOffsetIndex=");
	Serial.println(_currentTimeOffsetIndex);

	return TimeZones[_currentTimeOffsetIndex].name;
}

/* -------------------------------------------------- */
void TimeManagement::readTimeOffsetFromEEPROM()
{
	N614_EEPROMClass _eeprom;
	_currentTimeOffsetIndex = _eeprom.getTimeOffsetIndex ();
	
	if (_currentTimeOffsetIndex < 0 || _currentTimeOffsetIndex > 39) _currentTimeOffsetIndex = 16; //set to GMZ if off bounds
	_currentTimeOffset      = TimeZones[_currentTimeOffsetIndex].offset;
		
	static char outstr[15];
	dtostrf(_currentTimeOffset, 7, 3, outstr);
	//Serial.printf("\n Init time offset to [%d] %s\n", _currentTimeOffsetIndex, outstr);

}

/* -------------------------------------------------- */
_dstZones TimeManagement::readDSTZoneFromEEPROM()
{
	N614_EEPROMClass _eeprom;
	int dstIndex = _eeprom.getDSTZone();
	if (dstIndex < 0 || dstIndex > 9) dstIndex = 1; // set to GMZ if not valid
	//Serial.printf("\n Init DST Zone to [%d]\n", dstIndex);
	return static_cast<_dstZones>(dstIndex);
}

/* -------------------------------------------------- */
int TimeManagement::readTimeOffsetIndex()
{
	//Serial.printf("readTimeOffsetIndex %d\n", _currentTimeOffsetIndex);
	return  _currentTimeOffsetIndex;
}

/* -------------------------------------------------- */
void TimeManagement::setTimeOffsetIndex(int timeOffsetIndex)
{
	N614_EEPROMClass _eeprom;

	_eeprom.setTimeOffsetIndex(timeOffsetIndex);
	_currentTimeOffset = TimeZones[timeOffsetIndex].offset;
	_currentTimeOffsetIndex = timeOffsetIndex;

	static char outstr[15];
	dtostrf(_currentTimeOffset, 7, 3, outstr);
	//Serial.printf("\n Current TZ offset set to %s\n", outstr);

}

TimeManagement N614_TIMERULES;